defmodule ViaEstimation.Matrix do
  require Logger

    def mult_77_71(a77, b71) do
    [
      a00,
      a01,
      a02,
      a03,
      a04,
      a05,
      a06,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a60,
      a61,
      a62,
      a63,
      a64,
      a65,
      a66
    ] = a77

    [b00, b10, b20, b30, b40, b50, b60] = b71

    [
      a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30 + a04 * b40 + a05 * b50 + a06 * b60,
      a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30 + a14 * b40 + a15 * b50 + a16 * b60,
      a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30 + a24 * b40 + a25 * b50 + a26 * b60,
      a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30 + a34 * b40 + a35 * b50 + a36 * b60,
      a40 * b00 + a41 * b10 + a42 * b20 + a43 * b30 + a44 * b40 + a45 * b50 + a46 * b60,
      a50 * b00 + a51 * b10 + a52 * b20 + a53 * b30 + a54 * b40 + a55 * b50 + a56 * b60,
      a60 * b00 + a61 * b10 + a62 * b20 + a63 * b30 + a64 * b40 + a65 * b50 + a66 * b60
    ]
  end

  def mu(x) do
    x+1
  end
  def mult_67_77(a67, b77) do
    {
      a00,
      a01,
      a02,
      a03,
      a04,
      a05,
      a06,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56
    } = a67

    {
      b00,
      b01,
      b02,
      b03,
      b04,
      b05,
      b06,
      b10,
      b11,
      b12,
      b13,
      b14,
      b15,
      b16,
      b20,
      b21,
      b22,
      b23,
      b24,
      b25,
      b26,
      b30,
      b31,
      b32,
      b33,
      b34,
      b35,
      b36,
      b40,
      b41,
      b42,
      b43,
      b44,
      b45,
      b46,
      b50,
      b51,
      b52,
      b53,
      b54,
      b55,
      b56,
      b60,
      b61,
      b62,
      b63,
      b64,
      b65,
      b66
    } = b77

    {
      a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30 + a04 * b40 + a05 * b50 + a06 * b60,
      a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31 + a04 * b41 + a05 * b51 + a06 * b61,
      a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32 + a04 * b42 + a05 * b52 + a06 * b62,
      a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33 + a04 * b43 + a05 * b53 + a06 * b63,
      a00 * b04 + a01 * b14 + a02 * b24 + a03 * b34 + a04 * b44 + a05 * b54 + a06 * b64,
      a00 * b05 + a01 * b15 + a02 * b25 + a03 * b35 + a04 * b45 + a05 * b55 + a06 * b65,
      a00 * b06 + a01 * b16 + a02 * b26 + a03 * b36 + a04 * b46 + a05 * b56 + a06 * b66,
      a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30 + a14 * b40 + a15 * b50 + a16 * b60,
      a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41 + a15 * b51 + a16 * b61,
      a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42 + a15 * b52 + a16 * b62,
      a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43 + a15 * b53 + a16 * b63,
      a10 * b04 + a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44 + a15 * b54 + a16 * b64,
      a10 * b05 + a11 * b15 + a12 * b25 + a13 * b35 + a14 * b45 + a15 * b55 + a16 * b65,
      a10 * b06 + a11 * b16 + a12 * b26 + a13 * b36 + a14 * b46 + a15 * b56 + a16 * b66,
      a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30 + a24 * b40 + a25 * b50 + a26 * b60,
      a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41 + a25 * b51 + a26 * b61,
      a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42 + a25 * b52 + a26 * b62,
      a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43 + a25 * b53 + a26 * b63,
      a20 * b04 + a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44 + a25 * b54 + a26 * b64,
      a20 * b05 + a21 * b15 + a22 * b25 + a23 * b35 + a24 * b45 + a25 * b55 + a26 * b65,
      a20 * b06 + a21 * b16 + a22 * b26 + a23 * b36 + a24 * b46 + a25 * b56 + a26 * b66,
      a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30 + a34 * b40 + a35 * b50 + a36 * b60,
      a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41 + a35 * b51 + a36 * b61,
      a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42 + a35 * b52 + a36 * b62,
      a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43 + a35 * b53 + a36 * b63,
      a30 * b04 + a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44 + a35 * b54 + a36 * b64,
      a30 * b05 + a31 * b15 + a32 * b25 + a33 * b35 + a34 * b45 + a35 * b55 + a36 * b65,
      a30 * b06 + a31 * b16 + a32 * b26 + a33 * b36 + a34 * b46 + a35 * b56 + a36 * b66,
      a40 * b00 + a41 * b10 + a42 * b20 + a43 * b30 + a44 * b40 + a45 * b50 + a46 * b60,
      a40 * b01 + a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41 + a45 * b51 + a46 * b61,
      a40 * b02 + a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42 + a45 * b52 + a46 * b62,
      a40 * b03 + a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43 + a45 * b53 + a46 * b63,
      a40 * b04 + a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44 + a45 * b54 + a46 * b64,
      a40 * b05 + a41 * b15 + a42 * b25 + a43 * b35 + a44 * b45 + a45 * b55 + a46 * b65,
      a40 * b06 + a41 * b16 + a42 * b26 + a43 * b36 + a44 * b46 + a45 * b56 + a46 * b66,
      a50 * b00 + a51 * b10 + a52 * b20 + a53 * b30 + a54 * b40 + a55 * b50 + a56 * b60,
      a50 * b01 + a51 * b11 + a52 * b21 + a53 * b31 + a54 * b41 + a55 * b51 + a56 * b61,
      a50 * b02 + a51 * b12 + a52 * b22 + a53 * b32 + a54 * b42 + a55 * b52 + a56 * b62,
      a50 * b03 + a51 * b13 + a52 * b23 + a53 * b33 + a54 * b43 + a55 * b53 + a56 * b63,
      a50 * b04 + a51 * b14 + a52 * b24 + a53 * b34 + a54 * b44 + a55 * b54 + a56 * b64,
      a50 * b05 + a51 * b15 + a52 * b25 + a53 * b35 + a54 * b45 + a55 * b55 + a56 * b65,
      a50 * b06 + a51 * b16 + a52 * b26 + a53 * b36 + a54 * b46 + a55 * b56 + a56 * b66
    }
  end

def mult_33_31(a33, b31) do
    {a00, a01, a02, a10, a11, a12, a20, a21, a22} = a33
   {b00, b10, b20} = b31

    {
      a00 * b00 + a01 * b10 + a02 * b20,
      a10 * b00 + a11 * b10 + a12 * b20,
      a20 * b00 + a21 * b10 + a22 * b20
    }
  end



  @spec inv_66_matrex(struct()) :: struct()
  def inv_66_matrex(m) do
    m11 = m[1][1]
    m12 = m[1][2]
    m13 = m[1][3]
    m14 = m[1][4]
    m15 = m[1][5]
    m16 = m[1][6]
    m21 = m[2][1]
    m22 = m[2][2]
    m23 = m[2][3]
    m24 = m[2][4]
    m25 = m[2][5]
    m26 = m[2][6]
    m31 = m[3][1]
    m32 = m[3][2]
    m33 = m[3][3]
    m34 = m[3][4]
    m35 = m[3][5]
    m36 = m[3][6]
    m41 = m[4][1]
    m42 = m[4][2]
    m43 = m[4][3]
    m44 = m[4][4]
    m45 = m[4][5]
    m46 = m[4][6]
    m51 = m[5][1]
    m52 = m[5][2]
    m53 = m[5][3]
    m54 = m[5][4]
    m55 = m[5][5]
    m56 = m[5][6]
    m61 = m[6][1]
    m62 = m[6][2]
    m63 = m[6][3]
    m64 = m[6][4]
    m65 = m[6][5]
    m66 = m[6][6]

    a4545 = m55 * m66 - m56 * m65
    a3545 = m54 * m66 - m56 * m64
    a3445 = m54 * m65 - m55 * m64
    a2545 = m53 * m66 - m56 * m63
    a2445 = m53 * m65 - m55 * m63
    a2345 = m53 * m64 - m54 * m63
    a1545 = m52 * m66 - m56 * m62
    a1445 = m52 * m65 - m55 * m62
    a1345 = m52 * m64 - m54 * m62
    a1245 = m52 * m63 - m53 * m62
    a0545 = m51 * m66 - m56 * m61
    a0445 = m51 * m65 - m55 * m61
    a0345 = m51 * m64 - m54 * m61
    a0245 = m51 * m63 - m53 * m61
    a0145 = m51 * m62 - m52 * m61
    a4535 = m45 * m66 - m46 * m65
    a3535 = m44 * m66 - m46 * m64
    a3435 = m44 * m65 - m45 * m64
    a2535 = m43 * m66 - m46 * m63
    a2435 = m43 * m65 - m45 * m63
    a2335 = m43 * m64 - m44 * m63
    a1535 = m42 * m66 - m46 * m62
    a1435 = m42 * m65 - m45 * m62
    a1335 = m42 * m64 - m44 * m62
    a1235 = m42 * m63 - m43 * m62
    a4534 = m45 * m56 - m46 * m55
    a3534 = m44 * m56 - m46 * m54
    a3434 = m44 * m55 - m45 * m54
    a2534 = m43 * m56 - m46 * m53
    a2434 = m43 * m55 - m45 * m53
    a2334 = m43 * m54 - m44 * m53
    a1534 = m42 * m56 - m46 * m52
    a1434 = m42 * m55 - m45 * m52
    a1334 = m42 * m54 - m44 * m52
    a1234 = m42 * m53 - m43 * m52
    a0535 = m41 * m66 - m46 * m61
    a0435 = m41 * m65 - m45 * m61
    a0335 = m41 * m64 - m44 * m61
    a0235 = m41 * m63 - m43 * m61
    a0534 = m41 * m56 - m46 * m51
    a0434 = m41 * m55 - m45 * m51
    a0334 = m41 * m54 - m44 * m51
    a0234 = m41 * m53 - m43 * m51
    a0135 = m41 * m62 - m42 * m61
    a0134 = m41 * m52 - m42 * m51

    b345345 = m44 * a4545 - m45 * a3545 + m46 * a3445
    b245345 = m43 * a4545 - m45 * a2545 + m46 * a2445
    b235345 = m43 * a3545 - m44 * a2545 + m46 * a2345
    b234345 = m43 * a3445 - m44 * a2445 + m45 * a2345
    b145345 = m42 * a4545 - m45 * a1545 + m46 * a1445
    b135345 = m42 * a3545 - m44 * a1545 + m46 * a1345
    b134345 = m42 * a3445 - m44 * a1445 + m45 * a1345
    b125345 = m42 * a2545 - m43 * a1545 + m46 * a1245
    b124345 = m42 * a2445 - m43 * a1445 + m45 * a1245
    b123345 = m42 * a2345 - m43 * a1345 + m44 * a1245
    b045345 = m41 * a4545 - m45 * a0545 + m46 * a0445
    b035345 = m41 * a3545 - m44 * a0545 + m46 * a0345
    b034345 = m41 * a3445 - m44 * a0445 + m45 * a0345
    b025345 = m41 * a2545 - m43 * a0545 + m46 * a0245
    b024345 = m41 * a2445 - m43 * a0445 + m45 * a0245
    b023345 = m41 * a2345 - m43 * a0345 + m44 * a0245
    b015345 = m41 * a1545 - m42 * a0545 + m46 * a0145
    b014345 = m41 * a1445 - m42 * a0445 + m45 * a0145
    b013345 = m41 * a1345 - m42 * a0345 + m44 * a0145
    b012345 = m41 * a1245 - m42 * a0245 + m43 * a0145
    b345245 = m34 * a4545 - m35 * a3545 + m36 * a3445
    b245245 = m33 * a4545 - m35 * a2545 + m36 * a2445
    b235245 = m33 * a3545 - m34 * a2545 + m36 * a2345
    b234245 = m33 * a3445 - m34 * a2445 + m35 * a2345
    b145245 = m32 * a4545 - m35 * a1545 + m36 * a1445
    b135245 = m32 * a3545 - m34 * a1545 + m36 * a1345
    b134245 = m32 * a3445 - m34 * a1445 + m35 * a1345
    b125245 = m32 * a2545 - m33 * a1545 + m36 * a1245
    b124245 = m32 * a2445 - m33 * a1445 + m35 * a1245
    b123245 = m32 * a2345 - m33 * a1345 + m34 * a1245
    b345235 = m34 * a4535 - m35 * a3535 + m36 * a3435
    b245235 = m33 * a4535 - m35 * a2535 + m36 * a2435
    b235235 = m33 * a3535 - m34 * a2535 + m36 * a2335
    b234235 = m33 * a3435 - m34 * a2435 + m35 * a2335
    b145235 = m32 * a4535 - m35 * a1535 + m36 * a1435
    b135235 = m32 * a3535 - m34 * a1535 + m36 * a1335
    b134235 = m32 * a3435 - m34 * a1435 + m35 * a1335
    b125235 = m32 * a2535 - m33 * a1535 + m36 * a1235
    b124235 = m32 * a2435 - m33 * a1435 + m35 * a1235
    b123235 = m32 * a2335 - m33 * a1335 + m34 * a1235
    b345234 = m34 * a4534 - m35 * a3534 + m36 * a3434
    b245234 = m33 * a4534 - m35 * a2534 + m36 * a2434
    b235234 = m33 * a3534 - m34 * a2534 + m36 * a2334
    b234234 = m33 * a3434 - m34 * a2434 + m35 * a2334
    b145234 = m32 * a4534 - m35 * a1534 + m36 * a1434
    b135234 = m32 * a3534 - m34 * a1534 + m36 * a1334
    b134234 = m32 * a3434 - m34 * a1434 + m35 * a1334
    b125234 = m32 * a2534 - m33 * a1534 + m36 * a1234
    b124234 = m32 * a2434 - m33 * a1434 + m35 * a1234
    b123234 = m32 * a2334 - m33 * a1334 + m34 * a1234
    b045245 = m31 * a4545 - m35 * a0545 + m36 * a0445
    b035245 = m31 * a3545 - m34 * a0545 + m36 * a0345
    b034245 = m31 * a3445 - m34 * a0445 + m35 * a0345
    b025245 = m31 * a2545 - m33 * a0545 + m36 * a0245
    b024245 = m31 * a2445 - m33 * a0445 + m35 * a0245
    b023245 = m31 * a2345 - m33 * a0345 + m34 * a0245
    b045235 = m31 * a4535 - m35 * a0535 + m36 * a0435
    b035235 = m31 * a3535 - m34 * a0535 + m36 * a0335
    b034235 = m31 * a3435 - m34 * a0435 + m35 * a0335
    b025235 = m31 * a2535 - m33 * a0535 + m36 * a0235
    b024235 = m31 * a2435 - m33 * a0435 + m35 * a0235
    b023235 = m31 * a2335 - m33 * a0335 + m34 * a0235
    b045234 = m31 * a4534 - m35 * a0534 + m36 * a0434
    b035234 = m31 * a3534 - m34 * a0534 + m36 * a0334
    b034234 = m31 * a3434 - m34 * a0434 + m35 * a0334
    b025234 = m31 * a2534 - m33 * a0534 + m36 * a0234
    b024234 = m31 * a2434 - m33 * a0434 + m35 * a0234
    b023234 = m31 * a2334 - m33 * a0334 + m34 * a0234
    b015245 = m31 * a1545 - m32 * a0545 + m36 * a0145
    b014245 = m31 * a1445 - m32 * a0445 + m35 * a0145
    b013245 = m31 * a1345 - m32 * a0345 + m34 * a0145
    b015235 = m31 * a1535 - m32 * a0535 + m36 * a0135
    b014235 = m31 * a1435 - m32 * a0435 + m35 * a0135
    b013235 = m31 * a1335 - m32 * a0335 + m34 * a0135
    b015234 = m31 * a1534 - m32 * a0534 + m36 * a0134
    b014234 = m31 * a1434 - m32 * a0434 + m35 * a0134
    b013234 = m31 * a1334 - m32 * a0334 + m34 * a0134
    b012245 = m31 * a1245 - m32 * a0245 + m33 * a0145
    b012235 = m31 * a1235 - m32 * a0235 + m33 * a0135
    b012234 = m31 * a1234 - m32 * a0234 + m33 * a0134

    c23452345 = m33 * b345345 - m34 * b245345 + m35 * b235345 - m36 * b234345
    c13452345 = m32 * b345345 - m34 * b145345 + m35 * b135345 - m36 * b134345
    c12452345 = m32 * b245345 - m33 * b145345 + m35 * b125345 - m36 * b124345
    c12352345 = m32 * b235345 - m33 * b135345 + m34 * b125345 - m36 * b123345
    c12342345 = m32 * b234345 - m33 * b134345 + m34 * b124345 - m35 * b123345
    c03452345 = m31 * b345345 - m34 * b045345 + m35 * b035345 - m36 * b034345
    c02452345 = m31 * b245345 - m33 * b045345 + m35 * b025345 - m36 * b024345
    c02352345 = m31 * b235345 - m33 * b035345 + m34 * b025345 - m36 * b023345
    c02342345 = m31 * b234345 - m33 * b034345 + m34 * b024345 - m35 * b023345
    c01452345 = m31 * b145345 - m32 * b045345 + m35 * b015345 - m36 * b014345
    c01352345 = m31 * b135345 - m32 * b035345 + m34 * b015345 - m36 * b013345
    c01342345 = m31 * b134345 - m32 * b034345 + m34 * b014345 - m35 * b013345
    c01252345 = m31 * b125345 - m32 * b025345 + m33 * b015345 - m36 * b012345
    c01242345 = m31 * b124345 - m32 * b024345 + m33 * b014345 - m35 * b012345
    c01232345 = m31 * b123345 - m32 * b023345 + m33 * b013345 - m34 * b012345
    c23451345 = m23 * b345345 - m24 * b245345 + m25 * b235345 - m26 * b234345
    c13451345 = m22 * b345345 - m24 * b145345 + m25 * b135345 - m26 * b134345
    c12451345 = m22 * b245345 - m23 * b145345 + m25 * b125345 - m26 * b124345
    c12351345 = m22 * b235345 - m23 * b135345 + m24 * b125345 - m26 * b123345
    c12341345 = m22 * b234345 - m23 * b134345 + m24 * b124345 - m25 * b123345
    c23451245 = m23 * b345245 - m24 * b245245 + m25 * b235245 - m26 * b234245
    c13451245 = m22 * b345245 - m24 * b145245 + m25 * b135245 - m26 * b134245
    c12451245 = m22 * b245245 - m23 * b145245 + m25 * b125245 - m26 * b124245
    c12351245 = m22 * b235245 - m23 * b135245 + m24 * b125245 - m26 * b123245
    c12341245 = m22 * b234245 - m23 * b134245 + m24 * b124245 - m25 * b123245
    c23451235 = m23 * b345235 - m24 * b245235 + m25 * b235235 - m26 * b234235
    c13451235 = m22 * b345235 - m24 * b145235 + m25 * b135235 - m26 * b134235
    c12451235 = m22 * b245235 - m23 * b145235 + m25 * b125235 - m26 * b124235
    c12351235 = m22 * b235235 - m23 * b135235 + m24 * b125235 - m26 * b123235
    c12341235 = m22 * b234235 - m23 * b134235 + m24 * b124235 - m25 * b123235
    c23451234 = m23 * b345234 - m24 * b245234 + m25 * b235234 - m26 * b234234
    c13451234 = m22 * b345234 - m24 * b145234 + m25 * b135234 - m26 * b134234
    c12451234 = m22 * b245234 - m23 * b145234 + m25 * b125234 - m26 * b124234
    c12351234 = m22 * b235234 - m23 * b135234 + m24 * b125234 - m26 * b123234
    c12341234 = m22 * b234234 - m23 * b134234 + m24 * b124234 - m25 * b123234
    c03451345 = m21 * b345345 - m24 * b045345 + m25 * b035345 - m26 * b034345
    c02451345 = m21 * b245345 - m23 * b045345 + m25 * b025345 - m26 * b024345
    c02351345 = m21 * b235345 - m23 * b035345 + m24 * b025345 - m26 * b023345
    c02341345 = m21 * b234345 - m23 * b034345 + m24 * b024345 - m25 * b023345
    c03451245 = m21 * b345245 - m24 * b045245 + m25 * b035245 - m26 * b034245
    c02451245 = m21 * b245245 - m23 * b045245 + m25 * b025245 - m26 * b024245
    c02351245 = m21 * b235245 - m23 * b035245 + m24 * b025245 - m26 * b023245
    c02341245 = m21 * b234245 - m23 * b034245 + m24 * b024245 - m25 * b023245
    c03451235 = m21 * b345235 - m24 * b045235 + m25 * b035235 - m26 * b034235
    c02451235 = m21 * b245235 - m23 * b045235 + m25 * b025235 - m26 * b024235
    c02351235 = m21 * b235235 - m23 * b035235 + m24 * b025235 - m26 * b023235
    c02341235 = m21 * b234235 - m23 * b034235 + m24 * b024235 - m25 * b023235
    c03451234 = m21 * b345234 - m24 * b045234 + m25 * b035234 - m26 * b034234
    c02451234 = m21 * b245234 - m23 * b045234 + m25 * b025234 - m26 * b024234
    c02351234 = m21 * b235234 - m23 * b035234 + m24 * b025234 - m26 * b023234
    c02341234 = m21 * b234234 - m23 * b034234 + m24 * b024234 - m25 * b023234
    c01451345 = m21 * b145345 - m22 * b045345 + m25 * b015345 - m26 * b014345
    c01351345 = m21 * b135345 - m22 * b035345 + m24 * b015345 - m26 * b013345
    c01341345 = m21 * b134345 - m22 * b034345 + m24 * b014345 - m25 * b013345
    c01451245 = m21 * b145245 - m22 * b045245 + m25 * b015245 - m26 * b014245
    c01351245 = m21 * b135245 - m22 * b035245 + m24 * b015245 - m26 * b013245
    c01341245 = m21 * b134245 - m22 * b034245 + m24 * b014245 - m25 * b013245
    c01451235 = m21 * b145235 - m22 * b045235 + m25 * b015235 - m26 * b014235
    c01351235 = m21 * b135235 - m22 * b035235 + m24 * b015235 - m26 * b013235
    c01341235 = m21 * b134235 - m22 * b034235 + m24 * b014235 - m25 * b013235
    c01451234 = m21 * b145234 - m22 * b045234 + m25 * b015234 - m26 * b014234
    c01351234 = m21 * b135234 - m22 * b035234 + m24 * b015234 - m26 * b013234
    c01341234 = m21 * b134234 - m22 * b034234 + m24 * b014234 - m25 * b013234
    c01251345 = m21 * b125345 - m22 * b025345 + m23 * b015345 - m26 * b012345
    c01241345 = m21 * b124345 - m22 * b024345 + m23 * b014345 - m25 * b012345
    c01251245 = m21 * b125245 - m22 * b025245 + m23 * b015245 - m26 * b012245
    c01241245 = m21 * b124245 - m22 * b024245 + m23 * b014245 - m25 * b012245
    c01251235 = m21 * b125235 - m22 * b025235 + m23 * b015235 - m26 * b012235
    c01241235 = m21 * b124235 - m22 * b024235 + m23 * b014235 - m25 * b012235
    c01251234 = m21 * b125234 - m22 * b025234 + m23 * b015234 - m26 * b012234
    c01241234 = m21 * b124234 - m22 * b024234 + m23 * b014234 - m25 * b012234
    c01231345 = m21 * b123345 - m22 * b023345 + m23 * b013345 - m24 * b012345
    c01231245 = m21 * b123245 - m22 * b023245 + m23 * b013245 - m24 * b012245
    c01231235 = m21 * b123235 - m22 * b023235 + m23 * b013235 - m24 * b012235
    c01231234 = m21 * b123234 - m22 * b023234 + m23 * b013234 - m24 * b012234

    det =
      (m11 *
         (m22 * c23452345 - m23 * c13452345 + m24 * c12452345 - m25 * c12352345 +
            m26 * c12342345))
      |> Kernel.+(
        -m12 *
          (m21 * c23452345 - m23 * c03452345 + m24 * c02452345 - m25 * c02352345 +
             m26 * c02342345)
      )
      |> Kernel.+(
        m13 *
          (m21 * c13452345 - m22 * c03452345 + m24 * c01452345 - m25 * c01352345 +
             m26 * c01342345)
      )
      |> Kernel.+(
        -m14 *
          (m21 * c12452345 - m22 * c02452345 + m23 * c01452345 - m25 * c01252345 +
             m26 * c01242345)
      )
      |> Kernel.+(
        m15 *
          (m21 * c12352345 - m22 * c02352345 + m23 * c01352345 - m24 * c01252345 +
             m26 * c01232345)
      )
      |> Kernel.+(
        -m16 *
          (m21 * c12342345 - m22 * c02342345 + m23 * c01342345 - m24 * c01242345 +
             m25 * c01232345)
      )

    det = if det != 0, do: 1 / det, else: 0

    Matrex.new([
      [
        det *
          (m22 * c23452345 - m23 * c13452345 + m24 * c12452345 - m25 * c12352345 +
             m26 * c12342345),
        det *
          -(m12 * c23452345 - m13 * c13452345 + m14 * c12452345 - m15 * c12352345 +
              m16 * c12342345),
        det *
          (m12 * c23451345 - m13 * c13451345 + m14 * c12451345 - m15 * c12351345 +
             m16 * c12341345),
        det *
          -(m12 * c23451245 - m13 * c13451245 + m14 * c12451245 - m15 * c12351245 +
              m16 * c12341245),
        det *
          (m12 * c23451235 - m13 * c13451235 + m14 * c12451235 - m15 * c12351235 +
             m16 * c12341235),
        det *
          -(m12 * c23451234 - m13 * c13451234 + m14 * c12451234 - m15 * c12351234 +
              m16 * c12341234)
      ],
      [
        det *
          -(m21 * c23452345 - m23 * c03452345 + m24 * c02452345 - m25 * c02352345 +
              m26 * c02342345),
        det *
          (m11 * c23452345 - m13 * c03452345 + m14 * c02452345 - m15 * c02352345 +
             m16 * c02342345),
        det *
          -(m11 * c23451345 - m13 * c03451345 + m14 * c02451345 - m15 * c02351345 +
              m16 * c02341345),
        det *
          (m11 * c23451245 - m13 * c03451245 + m14 * c02451245 - m15 * c02351245 +
             m16 * c02341245),
        det *
          -(m11 * c23451235 - m13 * c03451235 + m14 * c02451235 - m15 * c02351235 +
              m16 * c02341235),
        det *
          (m11 * c23451234 - m13 * c03451234 + m14 * c02451234 - m15 * c02351234 +
             m16 * c02341234)
      ],
      [
        det *
          (m21 * c13452345 - m22 * c03452345 + m24 * c01452345 - m25 * c01352345 +
             m26 * c01342345),
        det *
          -(m11 * c13452345 - m12 * c03452345 + m14 * c01452345 - m15 * c01352345 +
              m16 * c01342345),
        det *
          (m11 * c13451345 - m12 * c03451345 + m14 * c01451345 - m15 * c01351345 +
             m16 * c01341345),
        det *
          -(m11 * c13451245 - m12 * c03451245 + m14 * c01451245 - m15 * c01351245 +
              m16 * c01341245),
        det *
          (m11 * c13451235 - m12 * c03451235 + m14 * c01451235 - m15 * c01351235 +
             m16 * c01341235),
        det *
          -(m11 * c13451234 - m12 * c03451234 + m14 * c01451234 - m15 * c01351234 +
              m16 * c01341234)
      ],
      [
        det *
          -(m21 * c12452345 - m22 * c02452345 + m23 * c01452345 - m25 * c01252345 +
              m26 * c01242345),
        det *
          (m11 * c12452345 - m12 * c02452345 + m13 * c01452345 - m15 * c01252345 +
             m16 * c01242345),
        det *
          -(m11 * c12451345 - m12 * c02451345 + m13 * c01451345 - m15 * c01251345 +
              m16 * c01241345),
        det *
          (m11 * c12451245 - m12 * c02451245 + m13 * c01451245 - m15 * c01251245 +
             m16 * c01241245),
        det *
          -(m11 * c12451235 - m12 * c02451235 + m13 * c01451235 - m15 * c01251235 +
              m16 * c01241235),
        det *
          (m11 * c12451234 - m12 * c02451234 + m13 * c01451234 - m15 * c01251234 +
             m16 * c01241234)
      ],
      [
        det *
          (m21 * c12352345 - m22 * c02352345 + m23 * c01352345 - m24 * c01252345 +
             m26 * c01232345),
        det *
          -(m11 * c12352345 - m12 * c02352345 + m13 * c01352345 - m14 * c01252345 +
              m16 * c01232345),
        det *
          (m11 * c12351345 - m12 * c02351345 + m13 * c01351345 - m14 * c01251345 +
             m16 * c01231345),
        det *
          -(m11 * c12351245 - m12 * c02351245 + m13 * c01351245 - m14 * c01251245 +
              m16 * c01231245),
        det *
          (m11 * c12351235 - m12 * c02351235 + m13 * c01351235 - m14 * c01251235 +
             m16 * c01231235),
        det *
          -(m11 * c12351234 - m12 * c02351234 + m13 * c01351234 - m14 * c01251234 +
              m16 * c01231234)
      ],
      [
        det *
          -(m21 * c12342345 - m22 * c02342345 + m23 * c01342345 - m24 * c01242345 +
              m25 * c01232345),
        det *
          (m11 * c12342345 - m12 * c02342345 + m13 * c01342345 - m14 * c01242345 +
             m15 * c01232345),
        det *
          -(m11 * c12341345 - m12 * c02341345 + m13 * c01341345 - m14 * c01241345 +
              m15 * c01231345),
        det *
          (m11 * c12341245 - m12 * c02341245 + m13 * c01341245 - m14 * c01241245 +
             m15 * c01231245),
        det *
          -(m11 * c12341235 - m12 * c02341235 + m13 * c01341235 - m14 * c01241235 +
              m15 * c01231235),
        det *
          (m11 * c12341234 - m12 * c02341234 + m13 * c01341234 - m14 * c01241234 +
             m15 * c01231234)
      ]
    ])
  end

  @spec to_2d_list(list(), integer(), integer()) :: list()
  def to_2d_list(matrix, rows, columns) do
    {_, mat_2d_list} =
      Enum.reduce(1..rows, {matrix, []}, fn _row_num, {matrix_rem, acc} ->
        {row, matrix_rem} = Enum.split(matrix_rem, columns)
        {matrix_rem, acc ++ [row]}
      end)

    Logger.debug(inspect(mat_2d_list))
    mat_2d_list
  end

  @spec matrex_to_1d_list(struct()) :: list()
  def matrex_to_1d_list(matrix) do
    {num_rows, _num_cols} = Matrex.size(matrix)

    Enum.reduce(1..num_rows, [], fn row_index, acc ->
      row = Matrex.row_to_list(matrix, row_index)
      acc ++ row
      # Enum.reduce(1..columns, [], fn col_index, row ->
      #   Logger.debug("col index: #{col_index}")
      #   Logger.debug("row: #{inspect(row)}")
      #   row ++ [matrix[row_index][col_index]]
      # end)
    end)
  end

  @spec matrex_to_2d_list(struct()) :: list()
  def matrex_to_2d_list(matrix) do
    {num_rows, _num_cols} = Matrex.size(matrix)

    Enum.reduce(1..num_rows, [], fn row_index, acc ->
      row = Matrex.row_to_list(matrix, row_index)
      # Enum.reduce(1..columns, [], fn col_index, row ->
      #   row ++ [matrix[row_index][col_index]]
      # end)

      acc ++ [row]
    end)
  end

  @spec list_to_matrex(list(), integer(), integer()) :: struct()
  def list_to_matrex(list_mat, rows, columns) do
    m = Matrex.zeros(rows, columns)

    {_, matrix} =
      Enum.reduce(list_mat, {0, m}, fn val, {index, acc} ->
        row = floor(index / columns)
        column = index - row * columns
        {index + 1, Matrex.set(acc, row + 1, column + 1, val)}
      end)

    matrix
  end
end
